diff --git a/windows/licence.h b/windows/licence.h
new file mode 100644
index 0000000..35f758a
--- /dev/null
+++ b/windows/licence.h
@@ -0,0 +1,19 @@
+/*
+ * licence.h - macro definitions for the PuTTY licence.
+ *
+ * Generated by licence.pl from LICENCE.
+ * You should edit those files rather than editing this one.
+ */
+
+#define LICENCE_TEXT(parsep) \
+    "PuTTY is copyright 1997-2018 Simon Tatham." \
+    parsep \
+    "Portions copyright Robert de Bath, Joris van Rantwijk, Delian Delchev, Andreas Schultz, Jeroen Massar, Wez Furlong, Nicolas Barry, Justin Bradford, Ben Harris, Malcolm Smith, Ahmad Khalifa, Markus Kuhn, Colin Watson, Christopher Staite, Lorenz Diener, Christian Brabandt, Jeff Smith, Pavel Kryukov, Maxim Kuznetsov, Svyatoslav Kuzmich, and CORE SDI S.A." \
+    parsep \
+    "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:" \
+    parsep \
+    "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software." \
+    parsep \
+    "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
+
+#define SHORT_COPYRIGHT_DETAILS "1997-2018 Simon Tatham"
diff --git a/windows/version.h b/windows/version.h
new file mode 100644
index 0000000..959642f
--- /dev/null
+++ b/windows/version.h
@@ -0,0 +1,35 @@
+/*
+ * This header file provides the various versioning-related #defines
+ * for a particular PuTTY build.
+ *
+ * When my automated build system does a full build, Buildscr
+ * completely overwrites this file with information derived from the
+ * circumstances and type of that build. The information _here_ is
+ * default stuff used for local development runs of 'make'.
+ */
+
+#define TEXTVER "GitForce build"
+#define SSHVER "PuTTY-GitForce-Build"
+#define BINARY_VERSION 0,0,70,2
+
+#ifndef SOURCE_COMMIT
+/*
+ * git commit id from which this build was made. This is defined by
+ * Buildscr for official builds - both source archives and prebuilt
+ * binaries - in the course of overwriting this file as described
+ * above. But we put it here under ifdef, so that it can also be
+ * passed in on the command line for Unix local development builds,
+ * which I treat specially because Unix developers - e.g. me - are
+ * quite likely to run 'make install' straight out of their dev
+ * directory so as to use the bleeding-edge code for day-to-day
+ * running.
+ *
+ * Windows doesn't really need the same treatment, because the easiest
+ * way to install a build properly on Windows is to run the installer,
+ * and the easiest way to do that is to run Buildscr, which will
+ * populate this field its own way. It's only the Unix automake build
+ * where you might go straight from local 'make' to 'make install'
+ * without going through Buildscr.
+ */
+#define SOURCE_COMMIT "unavailable"
+#endif
diff --git a/windows/wincons.c b/windows/wincons.c
index efdecd5..718e975 100644
--- a/windows/wincons.c
+++ b/windows/wincons.c
@@ -137,7 +137,11 @@ int verify_ssh_host_key(void *frontend, char *host, int port,
     GetConsoleMode(hin, &savemode);
     SetConsoleMode(hin, (savemode | ENABLE_ECHO_INPUT |
 			 ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT));
+#if 1  /* GD: Modification to always store the key */
+    line[0] = 'y';
+#else
     ReadFile(hin, line, sizeof(line) - 1, &i, NULL);
+#endif
     SetConsoleMode(hin, savemode);

     if (line[0] != '\0' && line[0] != '\r' && line[0] != '\n') {
diff --git a/windows/winpgnt.c b/windows/winpgnt.c
index 1919a9b..862e590 100644
--- a/windows/winpgnt.c
+++ b/windows/winpgnt.c
@@ -865,6 +865,24 @@ static LRESULT CALLBACK WndProc(HWND hwnd, UINT message,
 	    if (passphrase_box)
 		SendMessage(passphrase_box, WM_CLOSE, 0, 0);
 	    SendMessage(hwnd, WM_CLOSE, 0, 0);
+
+        // GD: For some reasons, just sending a close message does not exit cleanly
+        //     This patch is copied from the main exit function at the bottom of this file
+
+        /* Clean up the system tray icon */
+        {
+            NOTIFYICONDATA tnid;
+
+            tnid.cbSize = sizeof(NOTIFYICONDATA);
+            tnid.hWnd = hwnd;
+            tnid.uID = 1;
+
+            Shell_NotifyIcon(NIM_DELETE, &tnid);
+
+            DestroyMenu(systray_menu);
+        }
+        // GD: End of modification
+
 	    break;
 	  case IDM_VIEWKEYS:
 	    if (!keylist) {
@@ -1194,7 +1212,23 @@ int WINAPI WinMain(HINSTANCE inst, HINSTANCE prev, LPSTR cmdline, int show)
 	    else
 		command = "";
 	    break;
-	} else {
+	} else
+        // GD: Adding a new option -x <add-passphrase>
+        //     to add individual plaintext passphrases to the internal list
+        //     to avoid user prompting.
+        if (!strcmp(argv[i], "-x"))
+        {
+            char *p;
+            i++;                        // Next argument is a passphrase
+                                        // Yes - no error checks since git4win is the only process using it
+#if 0
+            p = (char*)calloc(1, strlen(argv[i]) + 1);
+            memcpy(p, argv[i], strlen(argv[i]));
+            addpos234(passphrases, p, 0);
+#endif
+            // GD: End of modification
+        } else
+        {
             Filename *fn = filename_from_str(argv[i]);
 	    win_add_keyfile(fn);
             filename_free(fn);
